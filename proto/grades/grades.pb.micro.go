// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: grades.proto

package grades

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Grades service

func NewGradesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Grades service

type GradesService interface {
	GetAllStudents(ctx context.Context, in *GetAllRequest, opts ...client.CallOption) (*StudentsReply, error)
	GetOneStudent(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*StudentReply, error)
	AddGrade(ctx context.Context, in *GradeRequest, opts ...client.CallOption) (*GradesReply, error)
}

type gradesService struct {
	c    client.Client
	name string
}

func NewGradesService(name string, c client.Client) GradesService {
	return &gradesService{
		c:    c,
		name: name,
	}
}

func (c *gradesService) GetAllStudents(ctx context.Context, in *GetAllRequest, opts ...client.CallOption) (*StudentsReply, error) {
	req := c.c.NewRequest(c.name, "Grades.GetAllStudents", in)
	out := new(StudentsReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradesService) GetOneStudent(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*StudentReply, error) {
	req := c.c.NewRequest(c.name, "Grades.GetOneStudent", in)
	out := new(StudentReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradesService) AddGrade(ctx context.Context, in *GradeRequest, opts ...client.CallOption) (*GradesReply, error) {
	req := c.c.NewRequest(c.name, "Grades.AddGrade", in)
	out := new(GradesReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grades service

type GradesHandler interface {
	GetAllStudents(context.Context, *GetAllRequest, *StudentsReply) error
	GetOneStudent(context.Context, *IdRequest, *StudentReply) error
	AddGrade(context.Context, *GradeRequest, *GradesReply) error
}

func RegisterGradesHandler(s server.Server, hdlr GradesHandler, opts ...server.HandlerOption) error {
	type grades interface {
		GetAllStudents(ctx context.Context, in *GetAllRequest, out *StudentsReply) error
		GetOneStudent(ctx context.Context, in *IdRequest, out *StudentReply) error
		AddGrade(ctx context.Context, in *GradeRequest, out *GradesReply) error
	}
	type Grades struct {
		grades
	}
	h := &gradesHandler{hdlr}
	return s.Handle(s.NewHandler(&Grades{h}, opts...))
}

type gradesHandler struct {
	GradesHandler
}

func (h *gradesHandler) GetAllStudents(ctx context.Context, in *GetAllRequest, out *StudentsReply) error {
	return h.GradesHandler.GetAllStudents(ctx, in, out)
}

func (h *gradesHandler) GetOneStudent(ctx context.Context, in *IdRequest, out *StudentReply) error {
	return h.GradesHandler.GetOneStudent(ctx, in, out)
}

func (h *gradesHandler) AddGrade(ctx context.Context, in *GradeRequest, out *GradesReply) error {
	return h.GradesHandler.AddGrade(ctx, in, out)
}
